<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Serializable接口</title>
    <url>/2020/11/17/Serializable%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<p>为什么我的bean实现了一个<code>Serializable</code>接口？</p>
<p>我搜了搜，很快嗷，都在告诉我这个东西拿来“持久化”。</p>
<p>持久化是什么？</p>
<p><code>持久化意味着一个对象的生存周期并不取决于程序是否执行，能存在于程序调用之间。</code></p>
<p>嗷，我直接放到数据库是不是也可以，是的。但是序列化可以在远程方法调用（RMI）中发挥很大作用。</p>
<p>类似于战时的电报传播，序列化会将你要传递的请战信息变成一串摩斯密码（字节序列），它保存了你这次战役拥有的武器（实例变量），以及发报人你的一些信息（类的类型信息），然后将这段密码抛进空中，在空中开始电磁传播（网络传输对象）；另一端拿到后也就是<br>译码工作（反序列化）。</p>
<p>我好像懂点了，<code>ctrl+b</code>准备打开看看这个东西，发现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>发现啥也没有，但是头上一大片绿绿的注释，肯定不简单，我就巧妙地给它翻译了，挑了几个重点（关于这里面继承的理解还不是很明白）：</p>
<ol>
<li>只有显式声明该接口才会被序列化，该接口只有标示作用。</li>
<li>可序列化父类的子类也可序列化。</li>
<li>在反序列化时，不可序列化类的字段将使用public或protected的无参构造函数进行初始化。</li>
<li>可序列化的类的子类必须能够访问该类的无参构造函数。</li>
<li>序列化和反序列化时，必须实现以下方法：<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">private void writeObject(java.io.ObjectOutputStream out)</span><br><span class="line">    throws IOException</span><br><span class="line">private void readObject(java.io.ObjectInputStream in)</span><br><span class="line">    throws IOException, ClassNotFoundException;</span><br><span class="line">private void readObjectNoData()</span><br><span class="line">    throws ObjectStreamException;</span><br></pre></td></tr></table></figure></li>
<li>序列化程序会给每一个可序列化的类一个版本号，叫做<code>serialVersionUID</code>，通过判断类的<code>serialVersionUID</code>来验证版本一致性的。</li>
</ol>
<p>原来还真只是个标识接口，仅仅告诉JVM，给我把这个类序列化 (⊙﹏⊙)</p>
<p>再稍微拓展下<code>serialVersionUID</code>, <code>serialVersionUID</code>有两种显示的生成方式：        </p>
<p>一是默认的1L，比如：<code>private static final long serialVersionUID = 1L;</code><br>二是根据类名、接口名、成员方法及属性等来生成一个64位的哈希字段，比如：<br><code>private static final long serialVersionUID = xxxxL;</code></p>
<p>当实现<code>java.io.Serializable</code>接口的类没有显式地定义一个<code>serialVersionUID</code>变量时候，Java序列化机制会根据编译的Class自动生成一个<code>serialVersionUID</code>作序列化版本比较用，这种情况下，如果Class文件(类名，方法明等)没有发生变化(增加空格，换行，增加注释等等)，就算再编译多次，<code>serialVersionUID</code>也不会变化的。(感觉就像计网里的校验和，或者是hashmap中的modcount用来记录修改次数)</p>
<p><strong>序列化保存到文件，举个例子（代码来自网络）：</strong></p>
<p>a）Make a FileOutputStream            </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">FileOutputStream fs &#x3D; new FileOutputStream(&quot;foo.ser&quot;);</span><br></pre></td></tr></table></figure>

<p>b）Make a ObjectOutputStream           </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ObjectOutputStream os &#x3D;  new ObjectOutputStream(fs);</span><br></pre></td></tr></table></figure>

<p>c）write the object</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">os.writeObject(myObject1);  </span><br><span class="line">os.writeObject(myObject2);  </span><br><span class="line">os.writeObject(myObject3);</span><br></pre></td></tr></table></figure>

<p>d) close the ObjectOutputStream</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">os.close();</span><br></pre></td></tr></table></figure>


<p>补充关键字：transient</p>
<p>Java的<code>serialization</code>提供了一种持久化对象实例的机制。当持久化对象时，可能有一个特殊的对象数据成员，我们不想用<code>serialization</code>机制来保存它。为了在一个特定对象的一个域上关闭<code>serialization</code>，可以在这个域前加上关键字<code>transient</code>。</p>
<p>示例（代码来自网络）：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class UserInfo implements Serializable &#123;  </span><br><span class="line">     private static final long serialVersionUID &#x3D; 996890129747019948L;  </span><br><span class="line">     private String name;  </span><br><span class="line">     private transient String psw;  </span><br><span class="line">   </span><br><span class="line">     public UserInfo(String name, String psw) &#123;  </span><br><span class="line">         this.name &#x3D; name;  </span><br><span class="line">         this.psw &#x3D; psw;  </span><br><span class="line">     &#125;  </span><br><span class="line">   </span><br><span class="line">     public String toString() &#123;  </span><br><span class="line">         return &quot;name&#x3D;&quot; + name + &quot;, psw&#x3D;&quot; + psw;  </span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;  </span><br><span class="line">   </span><br><span class="line"> public class TestTransient &#123;  </span><br><span class="line">     public static void main(String[] args) &#123;  </span><br><span class="line">         UserInfo userInfo &#x3D; new UserInfo(&quot;张三&quot;, &quot;123456&quot;);  </span><br><span class="line">         System.out.println(userInfo);  </span><br><span class="line">         try &#123;  </span><br><span class="line">             &#x2F;&#x2F; 序列化，被设置为transient的属性没有被序列化  </span><br><span class="line">             ObjectOutputStream o &#x3D; new ObjectOutputStream(new FileOutputStream(  </span><br><span class="line">                     &quot;UserInfo.out&quot;));  </span><br><span class="line">             o.writeObject(userInfo);  </span><br><span class="line">             o.close();  </span><br><span class="line">         &#125; catch (Exception e) &#123;  </span><br><span class="line">             &#x2F;&#x2F; TODO: handle exception  </span><br><span class="line">             e.printStackTrace();  </span><br><span class="line">         &#125;  </span><br><span class="line">         try &#123;  </span><br><span class="line">             &#x2F;&#x2F; 重新读取内容  </span><br><span class="line">             ObjectInputStream in &#x3D; new ObjectInputStream(new FileInputStream(  </span><br><span class="line">                     &quot;UserInfo.out&quot;));  </span><br><span class="line">             UserInfo readUserInfo &#x3D; (UserInfo) in.readObject();  </span><br><span class="line">             &#x2F;&#x2F;读取后psw的内容为null  </span><br><span class="line">             System.out.println(readUserInfo.toString());  </span><br><span class="line">         &#125; catch (Exception e) &#123;  </span><br><span class="line">             &#x2F;&#x2F; TODO: handle exception  </span><br><span class="line">             e.printStackTrace();  </span><br><span class="line">         &#125;  </span><br><span class="line">     &#125;  </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>


<p>总结：</p>
<ol>
<li>序列化只保存变量，不保存方法</li>
<li>父类序列化了，子类自动序列化，并且DFS所有子孙</li>
<li>序列化会不安全，就像电报也会被截取一样。</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>HashMap总结</title>
    <url>/2020/11/17/hashmap%E5%A5%A5%E4%B9%89/</url>
    <content><![CDATA[<p>数据存储：</p>
<p>（1）Node[] table哈希桶数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; &#123;  </span><br><span class="line">final int hash;    &#x2F;&#x2F;用来定位数组索引位置  </span><br><span class="line">final K key;  </span><br><span class="line">V value;  </span><br><span class="line">Node&lt;K,V&gt; next;   &#x2F;&#x2F;链表的下一个node  </span><br><span class="line">  </span><br><span class="line">Node(int hash, K key, V value, Node&lt;K,V&gt; next) &#123; ... &#125;  </span><br><span class="line">public final K getKey()&#123; ... &#125;  </span><br><span class="line">public final V getValue() &#123; ... &#125;  </span><br><span class="line">public final String toString() &#123; ... &#125;  </span><br><span class="line">public final int hashCode() &#123; ... &#125;  </span><br><span class="line">public final V setValue(V newValue) &#123; ... &#125;  </span><br><span class="line">public final boolean equals(Object o) &#123; ... &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<p>（2）Java中采用链地址法解决哈希冲突</p>
<p>当数据被哈希过后，得到一个数组下标，然后将数据放在对应下标元素的链表上。</p>
<p>（3）HashMap字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">int threshold;             &#x2F;&#x2F; 所能容纳的key-value对极限   </span><br><span class="line">final float loadFactor;    &#x2F;&#x2F; 负载因子  </span><br><span class="line">int modCount;    &#x2F;&#x2F; 记录HashMap内部结构发生变化的次数，覆盖不算</span><br><span class="line">int size;  &#x2F;&#x2F; 实际的键值对个数</span><br></pre></td></tr></table></figure>

<p>threshold = length * Load factor</p>
<p>在数组定义好长度之后，负载因子越大，所能容纳的键值对个数越多。</p>
<p>length必须是2的n次方，一定是个合数，而HashTable初始化桶大小为11，桶大小设计为素数是为了减少哈希冲突。</p>
<h1 id="功能实现-方法"><a href="#功能实现-方法" class="headerlink" title="功能实现-方法"></a>功能实现-方法</h1><h2 id="确定哈希桶数组索引位置"><a href="#确定哈希桶数组索引位置" class="headerlink" title="确定哈希桶数组索引位置"></a>确定哈希桶数组索引位置</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;方法一：  </span><br><span class="line">static final int hash(Object key) &#123;   &#x2F;&#x2F;jdk1.8 &amp; jdk1.7  </span><br><span class="line">     in th;  </span><br><span class="line">     &#x2F;&#x2F; h &#x3D; key.hashCode() 为第一步 取hashCode值  </span><br><span class="line">     &#x2F;&#x2F; h ^ (h &gt;&gt;&gt; 16)  为第二步 高位参与运算  </span><br><span class="line">     return(key &#x3D;&#x3D; null) ? 0: (h &#x3D; key.hashCode()) ^ (h &gt;&gt;&gt; 16);  </span><br><span class="line">&#125;  </span><br><span class="line">&#x2F;&#x2F;方法二：  </span><br><span class="line">static int indexFor(int h,int length) &#123;  &#x2F;&#x2F;jdk1.7的源码，jdk1.8没有这个方法，但是实现原理一样的  </span><br><span class="line">     return h &amp; (length-1); &#x2F;&#x2F;第三步 取模运算  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>本质上三步：取key的hashCode值、高位运算、取模运算</p>
<p><strong>上述代码中的方法二用来计算该对象保存在table数组中的哪个索引处。</strong></p>
<p>为了让元素分布相对均匀，需要让每个对象的hashcode对数组长度取模。</p>
<p>方法二中设计巧妙，由于HashMap底层数组的长度length总是2的n次方，因此<code>h&amp;(length-1)</code>运算等价于对length取模，也就是<code>h%length</code>，但是位运算的效率更高。</p>
<p>在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。</p>
<p><img src="https://i.loli.net/2020/11/17/aqeQvkdlpgoXtbF.png" alt="hashmap01.png"></p>
<h2 id="HashMap的put方法"><a href="#HashMap的put方法" class="headerlink" title="HashMap的put方法"></a>HashMap的put方法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public V put(K key, V value) &#123;  </span><br><span class="line">    &#x2F;&#x2F; 对key的hashCode()做hash  </span><br><span class="line">    return putVal(hash(key), key, value, false, true);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">final V putVal(int hash, K key, V value, boolean onlyIfAbsent,  </span><br><span class="line">               boolean evict) &#123;  </span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i;  </span><br><span class="line">    &#x2F;&#x2F; 步骤①：tab为空则创建  </span><br><span class="line">    if ((tab &#x3D; table) &#x3D;&#x3D; null || (n &#x3D; tab.length) &#x3D;&#x3D; 0)  </span><br><span class="line">        n &#x3D; (tab &#x3D; resize()).length;  </span><br><span class="line">    &#x2F;&#x2F; 步骤②：计算index，并对null做处理   </span><br><span class="line">    if ((p &#x3D; tab[i &#x3D; (n - 1) &amp; hash]) &#x3D;&#x3D; null)   </span><br><span class="line">        tab[i] &#x3D; newNode(hash, key, value, null);  </span><br><span class="line">    else &#123;  </span><br><span class="line">        Node&lt;K,V&gt; e; K k;  </span><br><span class="line">        &#x2F;&#x2F; 步骤③：节点key存在，直接覆盖value  </span><br><span class="line">        if (p.hash &#x3D;&#x3D; hash &amp;&amp;  </span><br><span class="line">            ((k &#x3D; p.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))  </span><br><span class="line">            e &#x3D; p;  </span><br><span class="line">        &#x2F;&#x2F; 步骤④：判断该链为红黑树  </span><br><span class="line">        else if (p instanceof TreeNode)  </span><br><span class="line">            e &#x3D; ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value);  </span><br><span class="line">        &#x2F;&#x2F; 步骤⑤：该链为链表  </span><br><span class="line">        else &#123;  </span><br><span class="line">            for (int binCount &#x3D; 0; ; ++binCount) &#123;  </span><br><span class="line">                if ((e &#x3D; p.next) &#x3D;&#x3D; null) &#123;  </span><br><span class="line">                    p.next &#x3D; newNode(hash, key,value,null);  </span><br><span class="line">                       &#x2F;&#x2F;链表长度大于8转换为红黑树进行处理  </span><br><span class="line">                    if (binCount &gt;&#x3D; TREEIFY_THRESHOLD - 1) &#x2F;&#x2F; -1 for 1st    </span><br><span class="line">                        treeifyBin(tab, hash);  </span><br><span class="line">                    break;  </span><br><span class="line">                &#125;  </span><br><span class="line">                   &#x2F;&#x2F; key已经存在直接覆盖value  </span><br><span class="line">                if (e.hash &#x3D;&#x3D; hash &amp;&amp;  </span><br><span class="line">                    ((k &#x3D; e.key) &#x3D;&#x3D; key || (key !&#x3D; null &amp;&amp; key.equals(k))))                                              </span><br><span class="line">                    break;  </span><br><span class="line">                p &#x3D; e;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">         </span><br><span class="line">        if (e !&#x3D; null) &#123; &#x2F;&#x2F; existing mapping for key  </span><br><span class="line">            V oldValue &#x3D; e.value;  </span><br><span class="line">            if (!onlyIfAbsent || oldValue &#x3D;&#x3D; null)  </span><br><span class="line">                e.value &#x3D; value;  </span><br><span class="line">            afterNodeAccess(e);  </span><br><span class="line">            return oldValue;  </span><br><span class="line">       &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    ++modCount;  </span><br><span class="line">    &#x2F;&#x2F; 步骤⑥：超过最大容量 就扩容  </span><br><span class="line">    if (++size &gt; threshold)  </span><br><span class="line">        resize();  </span><br><span class="line">    afterNodeInsertion(evict);  </span><br><span class="line">    return null;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://i.loli.net/2020/11/17/Z9JkyA4Dzj3mfc2.png" alt="hashmap02.png"></p>
<p>①.判断键值对数组<code>table[i]</code>是否为空或为<code>null</code>，否则执行<code>resize()</code>进行扩容；</p>
<p>②.根据键值key计算hash值得到插入的数组索引i，如果table[i]==null，直接新建节点添加，转向⑥，如果table[i]不为空，转向③；</p>
<p>③.判断table[i]的首个元素是否和key一样，如果相同直接覆盖value，否则转向④，这里的相同指的是hashCode以及equals；</p>
<p>④.判断table[i] 是否为treeNode，即table[i] 是否是红黑树，如果是红黑树，则直接在树中插入键值对，否则转向⑤；</p>
<p>⑤.遍历table[i]，判断链表长度是否大于8，大于8的话把链表转换为红黑树，在红黑树中执行插入操作，否则进行链表的插入操作；遍历过程中若发现key已经存在直接覆盖value即可；</p>
<p>⑥.插入成功后，判断实际存在的键值对数量size是否超多了最大容量threshold，如果超过，进行扩容。 </p>
<h2 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">final Node&lt;K,V&gt;[] resize() &#123;  </span><br><span class="line">    Node&lt;K,V&gt;[] oldTab &#x3D; table;  &#x2F;&#x2F; 引用扩容前的entry数组</span><br><span class="line">    int oldCap &#x3D; (oldTab &#x3D;&#x3D; null) ? 0 : oldTab.length;  </span><br><span class="line">    int oldThr &#x3D; threshold;  </span><br><span class="line">    int newCap, newThr &#x3D; 0;  </span><br><span class="line">    if (oldCap &gt; 0) &#123;  </span><br><span class="line">        if (oldCap &gt;&#x3D; MAXIMUM_CAPACITY) &#123;  &#x2F;&#x2F; 如果已经到最大2^30了</span><br><span class="line">            threshold &#x3D; Integer.MAX_VALUE;   &#x2F;&#x2F; 修改阈值为2^31-1，则以后不会再扩容了</span><br><span class="line">            return oldTab;  </span><br><span class="line">        &#125;  </span><br><span class="line">        else if ((newCap &#x3D; oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp;  </span><br><span class="line">                 oldCap &gt;&#x3D; DEFAULT_INITIAL_CAPACITY)  </span><br><span class="line">            newThr &#x3D; oldThr &lt;&lt; 1; &#x2F;&#x2F; double threshold  两倍扩容</span><br><span class="line">    &#125;  </span><br><span class="line">    else if (oldThr &gt; 0) &#x2F;&#x2F; initial capacity was placed in threshold  </span><br><span class="line">        newCap &#x3D; oldThr;  </span><br><span class="line">    else &#123;               &#x2F;&#x2F; zero initial threshold signifies using defaults  </span><br><span class="line">        newCap &#x3D; DEFAULT_INITIAL_CAPACITY;  </span><br><span class="line">        newThr &#x3D; (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);  </span><br><span class="line">    &#125;  </span><br><span class="line">    if (newThr &#x3D;&#x3D; 0) &#123;  </span><br><span class="line">        float ft &#x3D; (float)newCap * loadFactor;  &#x2F;&#x2F; 修改阈值</span><br><span class="line">        newThr &#x3D; (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ?  </span><br><span class="line">                  (int)ft : Integer.MAX_VALUE);  </span><br><span class="line">    &#125;  </span><br><span class="line">    threshold &#x3D; newThr;  &#x2F;&#x2F; 更新阈值</span><br><span class="line">    @SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)  </span><br><span class="line">        Node&lt;K,V&gt;[] newTab &#x3D; (Node&lt;K,V&gt;[])new Node[newCap];   &#x2F;&#x2F; 初始化一个新的Entry数组</span><br><span class="line">    table &#x3D; newTab;  &#x2F;&#x2F; 引用新数组</span><br><span class="line">    if (oldTab !&#x3D; null) &#123;  &#x2F;&#x2F; 原来1.7中的transfer()函数</span><br><span class="line">        for (int j &#x3D; 0; j &lt; oldCap; ++j) &#123;  &#x2F;&#x2F; 遍历旧的数组</span><br><span class="line">            Node&lt;K,V&gt; e;  &#x2F;&#x2F; 取得旧的Entry数组的每个元素</span><br><span class="line">            if ((e &#x3D; oldTab[j]) !&#x3D; null) &#123;  </span><br><span class="line">                oldTab[j] &#x3D; null;  &#x2F;&#x2F; 释放旧的Entry数组对象的引用</span><br><span class="line">                if (e.next &#x3D;&#x3D; null)  &#x2F;&#x2F; 如果为首元素则直接建新的Entry</span><br><span class="line">                    newTab[e.hash &amp; (newCap - 1)] &#x3D; e;  </span><br><span class="line">                else if (e instanceof TreeNode)  &#x2F;&#x2F; 如果是红黑树就用红黑树的插入</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap);  </span><br><span class="line">                else &#123; &#x2F;&#x2F; preserve order  维持原来数组中的顺序，1.7中为头插法，因此是倒置的</span><br><span class="line">                    Node&lt;K,V&gt; loHead &#x3D; null, loTail &#x3D; null;  </span><br><span class="line">                    Node&lt;K,V&gt; hiHead &#x3D; null, hiTail &#x3D; null;  </span><br><span class="line">                    Node&lt;K,V&gt; next;  </span><br><span class="line">                    do &#123;  </span><br><span class="line">                        next &#x3D; e.next;  </span><br><span class="line">                        if ((e.hash &amp; oldCap) &#x3D;&#x3D; 0) &#123;  </span><br><span class="line">                            if (loTail &#x3D;&#x3D; null)  </span><br><span class="line">                                loHead &#x3D; e;  </span><br><span class="line">                            else  </span><br><span class="line">                                loTail.next &#x3D; e;  </span><br><span class="line">                            loTail &#x3D; e;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                        else &#123;  </span><br><span class="line">                            if (hiTail &#x3D;&#x3D; null)  </span><br><span class="line">                                hiHead &#x3D; e;  </span><br><span class="line">                            else  </span><br><span class="line">                                hiTail.next &#x3D; e;  </span><br><span class="line">                            hiTail &#x3D; e;  </span><br><span class="line">                        &#125;  </span><br><span class="line">                    &#125; while ((e &#x3D; next) !&#x3D; null);  </span><br><span class="line">                    if (loTail !&#x3D; null) &#123;  </span><br><span class="line">                        loTail.next &#x3D; null;  </span><br><span class="line">                        newTab[j] &#x3D; loHead;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                    if (hiTail !&#x3D; null) &#123;  </span><br><span class="line">                        hiTail.next &#x3D; null;  </span><br><span class="line">                        newTab[j + oldCap] &#x3D; hiHead;  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">    return newTab;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p>
<p><img src="https://i.loli.net/2020/11/17/eskNWLOH8RJzmI1.png" alt="hashmap03.png"></p>
<p>因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就好了，是0的话索引没变，是1的话索引变成“原索引+oldCap”，可以看看下图为16扩充为32的resize示意图： </p>
<p><img src="https://i.loli.net/2020/11/17/erLVQXmpJIiN3Fs.png" alt="hashmap04.png"></p>
<p>这个设计确实非常的巧妙，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，因此resize的过程，均匀的把之前的冲突的节点分散到新的bucket了。这一块就是JDK1.8新增的优化点。有一点注意区别，JDK1.7中rehash的时候，旧链表迁移新链表的时候，如果在新表的数组索引位置相同，则链表元素会倒置，但是从上图可以看出，JDK1.8不会倒置（维持秩序）。</p>
]]></content>
  </entry>
  <entry>
    <title>TCP/UDP总结</title>
    <url>/2020/11/19/TCP-UDP%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h1 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h1><ul>
<li>端口号用来识别同一台计算机中进行通信的不同 <strong>应用程序</strong> 。</li>
<li>FTP,SSH,SMTP,HTTP等客户端</li>
<li>只用端口来识别某一个通信是不够的，TCP/IP或UDP/IP通信中通常采用5个信息来识别一个通信：“源IP地址”、“目标IP地址”、“协议号”、“源端口号”、“目标端口号”，只要其中某一项不同就属于不同的通信。</li>
<li>端口号的确定：<ul>
<li>标准既定的端口号：知名端口号，分布在<code>0 ~ 1023</code></li>
<li>时序分配法：由操作系统为每个应用程序分配互不冲突的端口号，动态管理这些端口号，<code>49152 ~ 65536</code></li>
</ul>
</li>
<li>端口号的处理是根据每个传输协议的不同而进行的，数据到达IP层后，会先检查IP首部中的协议号，再传给相应协议的模块，TCP模块和UDP模块。</li>
</ul>
<a id="more"></a>
<h1 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><ul>
<li><strong><em>User Datagram Protocal</em></strong></li>
<li>有点类似于用户说说么听什么的机制，面向无连接，细节控制采用UDP的应用程序去处理</li>
<li>应用于：<ul>
<li>包总量较少的通信（DNS、SNMP等）</li>
<li>视频、音频等多媒体通信（即时通信）</li>
<li>现定于LAN等特定网络中的应用通信</li>
<li>广播通信（广播、多播）</li>
</ul>
</li>
</ul>
<h1 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><ul>
<li>TCP通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现可靠传输。</li>
<li>通过序列号和确认应答提高可靠性，在滴定时间内没有的等到ACK确认应答，则进行重发。</li>
<li><strong>序列号</strong>：按顺序给发送数据的每一个字节（8位字节）都标上号码的编号。接收端查询接收数据TCP首部中的序列号和数据的长度，将自己下一步应该接收的序号作为确认应答返送回去。</li>
<li>序列号的初始值并非为0，是建立连接后的随机值，只不过后面的计算是在此数上面对每一个字节+1。</li>
<li><strong><em>如何确定重发时间，认为发送数据被丢？</em></strong><ul>
<li>TCP在每次发包时都会计算往返时间（RTT，报文段的往返时间）及其偏差（RTT时间波动的值、方差、抖动）</li>
<li>将这个往返时间和偏差相加，重发超时的时间稍大于这个总和即可。</li>
</ul>
</li>
</ul>
<h2 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h2><ul>
<li>TCP会在数据通信之前，通过TCP首部（用于控制的字段）发送一个SYN包作为建立连接的请求等待确认应答，如果对端发来确认应答ACK，则表示可以建立连接，断开连接则发送FIN包。</li>
<li>建立连接需要发送三个包，“三次握手”  </li>
<li>一个连接与断开，正常过程需要至少发送七个包。</li>
<li><strong>段</strong>：TCP以段为单位发送数据。</li>
<li><strong>MSS</strong>：Maximum Segment Size，最大消息长度，发送数据包的单位，表示1段，最理想的情况就是，最大消息长度正好是IP中不会被分片处理的最大数据长度。</li>
<li>MSS是在三次握手的时候，在两端主机之间被计算出来的，TCP首部中写入MSS选项，双方商量后得到一个较小值。</li>
</ul>
<h2 id="滑动窗口是什么？"><a href="#滑动窗口是什么？" class="headerlink" title="滑动窗口是什么？"></a>滑动窗口是什么？</h2><ul>
<li>比较早的时候，TCP实现可靠传输使用send-wait-send模式，发送数据后会启动定时器，但是数据或ACK丢失，那么定时器到时后会进行重传，这种模式严重降低效率，称为PAR（Positive acknowledgment with retransmission）。</li>
<li>滑动窗口的引入解决上述问题，实现一次性发多包，且保证接收的顺序性。</li>
<li>滑动窗口使得数据从概念上分成以下几类：</li>
</ul>
<ol>
<li><strong><em>Sent and Acknowledged</em></strong>：这些数据表示已经发送成功并已经被确认的数据，比如图中的前31个bytes，这些数据其实的位置是在窗口之外了，因为窗口内顺序最低的被确认之后，要移除窗口，实际上是窗口进行合拢，同时打开接收新的带发送的数据。</li>
<li><strong><em>Send But Not Yet Acknowledged</em></strong>：这部分数据称为发送但没有被确认，数据被发送出去，没有收到接收端的ACK，认为并没有完成发送，这个属于窗口内的数据。</li>
<li><strong><em>Not Sent，Recipient Ready to Receive</em></strong>：这部分是尽快发送的数据，这部分数据已经被加载到缓存中，也就是窗口中了，等待发送，其实这个窗口是完全有接收方告知的，接收方告知还是能够接受这些包，所以发送方需要尽快的发送这些包。</li>
<li><strong><em>Not Sent，Recipient Not Ready to Receive</em></strong>： 这些数据属于未发送，同时接收端也不允许发送的，因为这些数据已经超出了发送端所接收的范围。</li>
</ol>
<p><img src="https://i.loli.net/2020/11/19/7xPgacr4EfGQ3dA.png"></p>
<ul>
<li>对于接收端也有一个类似的接收端口，接收端的数据分为3类，但是接收端不需要等待ACK，因此没有类似接收并确认的分类：</li>
</ul>
<ol>
<li><strong><em>Received and ACK Not Send to Process</em></strong>：这部分数据属于接收了数据但是还没有被上层的应用程序接收，也是被缓存在窗口内。</li>
<li><strong><em>Received  Not ACK</em></strong>: 已经接收并，但是还没有回复ACK，这些包可能输属于Delay ACK的范畴了。</li>
<li><strong><em>Not Received</em></strong>：有空位，还没有被接收的数据。</li>
</ol>
<ul>
<li>对于发送方来说，窗口内包括两部分：发送窗口（已经发送，但是未ACK）、可用窗口（接收端允许发送但是没有发送的部分）。</li>
</ul>
<ol>
<li><strong><em>Send Window</em></strong>： 20个bytes 这部分值是有接收方在三次握手的时候进行通告的，同时在接收过程中也不断的通告可以发送的窗口大小，来进行适应。</li>
<li><strong><em>Window Already Sent</em></strong>: 已经发送的数据，但是并没有收到ACK。</li>
</ol>
<p><img src="https://i.loli.net/2020/11/19/S85XCncIqUNt3H6.png"></p>
<h2 id="滑动窗口原理"><a href="#滑动窗口原理" class="headerlink" title="滑动窗口原理"></a>滑动窗口原理</h2><ul>
<li>TCP并不是每一个报文段都会回复ACK的，可能会对两个报文段发送一个ACK，也可能会对多个报文段发送1个ACK（ <strong><em>累计AC</em></strong> ），比如说发送方有1/2/3 3个报文段，先发送了2,3 两个报文段，但是接收方期望收到1报文段，这个时候2,3报文段就只能放在缓存中等待报文1的空洞被填上，如果报文1，一直不来，报文2/3也将被丢弃（保证顺序性），如果报文1来了，那么会发送一个ACK对这3个报文进行一次确认。</li>
<li>举例说明滑动窗口原理：</li>
</ul>
<ol>
<li>假设32~45 这些数据，是上层Application发送给TCP的，TCP将其分成四个Segment来发往internet。</li>
<li>seg1 （32 ~ 34） | seg2 （35 ~ 36） | seg3 （37 ~ 41） | seg4 （42 ~ 45）  这四个片段，依次发送出去，此时假设接收端之接收到了seg1 seg2 seg4。</li>
<li>此时接收端的行为是回复一个ACK包说明已经接收到了32~36的数据，并将seg4进行缓存（保证顺序，产生一个保存seg3的hole）。</li>
<li>发送端收到ACK之后，就会将（32~36）的数据包从发送并没有确认切到发送已经确认，提出窗口，这个时候窗口向右移动。</li>
<li>假设接收端通告的Window Size仍然不变，此时窗口右移，产生一些新的空位，这些是接收端允许发送的范畴。</li>
<li>对于丢失的seg3，如果超过一定时间，TCP就会重新传送（重传机制），重传成功会seg3 seg4一块被确认，不成功，seg4也将被丢弃。</li>
<li>就是不断重复着上述的过程，随着窗口不断滑动，将真个数据流发送到接收端，实际上接收端的Window Size通告也是会变化的，接收端根据这个值来确定何时及发送多少数据，从对数据流进行流控。原理图如下图所示：</li>
</ol>
<p><img src="https://i.loli.net/2020/11/19/TRmsS1UYOF6Wcuh.png"></p>
<h2 id="流量控制"><a href="#流量控制" class="headerlink" title="流量控制"></a>流量控制</h2><ul>
<li>滑动窗口的动态调整，即控制流量的过程。</li>
<li>接收端主机向发送方主机通知自己可以接收的数据大小，于是发送端会发送不超过这个限度的数据，该大小限度就被称作窗口大小。</li>
</ul>
<p><img src="https://i.loli.net/2020/11/19/8j2dWkoAZXRh6tf.png"></p>
<ul>
<li>当发送方得知接收方缓存区已满的时候就停止放松，发送方合适再继续发送数据呢？<ul>
<li>一种方式是接收方主动发送更新的通知，发送方重新发送数据</li>
<li>但是如果更新通知在通信过程中丢失，会导致无法再通信，因此发送方会时不时发送一个叫做 <strong><em>窗口探测</em></strong> 的数据段，此数据段仅含一个字节以获取最新的窗口大小信息。</li>
</ul>
</li>
</ul>
<p><img src="https://i.loli.net/2020/11/19/V5qe8n1JNku2cQy.png"></p>
<h2 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h2><ul>
<li>控制发送方发送的数据包大小，防止网络拥堵。</li>
<li>与流量控制的不同，如果发送的数据由于网络出现了拥塞导致无法到达接收方，流量控制是点对点的。</li>
</ul>
<h3 id="如何知道网络拥塞情况？"><a href="#如何知道网络拥塞情况？" class="headerlink" title="如何知道网络拥塞情况？"></a>如何知道网络拥塞情况？</h3><ul>
<li>A与B建立连接之后，就可以向B发送数据了，然而这个时候A并不知道此时的网络拥塞情况如何，也就是说，A不知道一次性连续发送多少个数据包好，我们也把A一次性连续发送多少个数据包称之为拥塞窗口，用N代表此时拥塞窗口的大小吧。</li>
<li>探测网络拥堵的情况，有两种方式：</li>
</ul>
<ol>
<li>线性探测，一个一个增加发送数据的大小（一次性连续发送数据包的个数），如果没有超时就继续加</li>
</ol>
<p><img src="https://i.loli.net/2020/11/19/i36wf5SxatXjnu8.png"></p>
<ol start="2">
<li>指数探测，刚开始发送1个，如果没有发生超时时间，就发送2个，如果还是没有发送超时事件就发送4个，接着8个…，用翻倍的速度类推,即 N = 1, 2, 4, 8, 16…</li>
</ol>
<p><img src="https://i.loli.net/2020/11/19/JIc7egnvabSMZtK.png"></p>
<ul>
<li>这两种方式都会出现瓶颈期，结合两种方式，刚开始可以以指数的速度增长，增长到某一个值，我们把这个值称之为慢启动阈值，我们也把指数增长阶段称之为慢启动，线性增长阶段称之为拥塞避免</li>
</ul>
<p><img src="https://i.loli.net/2020/11/19/S49nuDJvxRTlw8a.png"></p>
<h3 id="到了瓶颈期后怎么办？"><a href="#到了瓶颈期后怎么办？" class="headerlink" title="到了瓶颈期后怎么办？"></a>到了瓶颈期后怎么办？</h3><ul>
<li>无论是指数增长还是一个一个增长，最终肯定会出现超时事件，总不可能无限增长吧。当出现超时事件时，我们就认为此时网络出现了拥塞了，不能再继续增长了。我们就把这个时候的N的值称之为瓶颈值吧，用MAX这个字母来代替吧，即最大值。</li>
</ul>
<p><img src="https://i.loli.net/2020/11/19/Nz62BeT9JRuDAbC.png"></p>
<ul>
<li>当到达最大值之后我们采取的策略是这样的：我们就回到最初的最初的状态，也就是说从1，2，4，8…..开始,不过这个时候我们还会把阈值调小，调为MAX值的一半，即<code>阈值 = MAX / 2</code>。</li>
</ul>
<p><img src="https://i.loli.net/2020/11/19/LX3aCAqSfDoEJTQ.png"></p>
<h3 id="超时事件一定是网络拥塞"><a href="#超时事件一定是网络拥塞" class="headerlink" title="超时事件一定是网络拥塞?"></a>超时事件一定是网络拥塞?</h3><ul>
<li>也有可能是某个数据包丢失或损害导致了超时事件。</li>
<li>可以通过 <strong><em>冗余ACK</em></strong> 来处理以上情况。</li>
<li><strong><em>举个例子</em></strong> ：如果A给B发送<code>M1, M2, M3, M4, M5...N</code>个数据包，如果B收到了<code>M1, M2, M4....</code>却始终没有收到M3，这个时候就会重复确认M2，意在告诉A,M3还没收到，可能是丢失了。</li>
</ul>
<p><img src="https://i.loli.net/2020/11/19/q6cfLHMCwN579nx.png"></p>
<ul>
<li>当A连续收到了三个确认M2的ACK，且M3超时事件还没发生。A就知道M3可能丢失了，这个时候A就不必等待M3设置的计时器到期了，而是 <strong><em>快速重传</em></strong> M3。并且把阈值设置为MAX的一半，即阈值 = MAX/2，但是这个时候并非把控制窗口N设置为1，而是让N = 阈值，N在一个一个增长。</li>
</ul>
<p><img src="https://i.loli.net/2020/11/19/BqwyMLCGu3rlWYj.png"></p>
<ul>
<li>我们也把这种情况称之为 <strong><em>快速恢复</em></strong>。而这种具有快速恢复的TCP版本称之为TCP Reno。</li>
<li>还有另外一种TCP版本，无论是收到三个相同的ACK还是发生超时事件，都把拥塞窗口的大小设为1，**<em>从最初状态开始**</em>，这种版本的TCP我们称之为TCP Tahoe。</li>
</ul>
<h1 id="UDP首部格式"><a href="#UDP首部格式" class="headerlink" title="UDP首部格式"></a>UDP首部格式</h1><ul>
<li>源端口号 <code>Source Port</code>：表示发送端端口号，16位，可选项，没有设置则默认为0，可用于不需要返回的通信中。</li>
<li>目标端口号 <code>Destination Port</code>：表示接收端端口号，16位。</li>
<li>包长度 <code>Length</code>：该字段保存了UDP首部的长度跟数据的长度之和，8位字节。</li>
<li>校验和 <code>Checksum</code>：提高可靠的UDP首部和数据。</li>
</ul>
<h1 id="TCP首部格式"><a href="#TCP首部格式" class="headerlink" title="TCP首部格式"></a>TCP首部格式</h1><ul>
<li>源端口号：16位</li>
<li>目标端口号：16位</li>
<li>序列号：发送数据的位置，32位，每发送一次就累加一次该数据字节数的大小。建立连接时由计算机生成的随机数作为初始值通过SYN包传给接收端主机。SYN和FIN包虽然不携带数据，但是会作为一个字节增加对应的序列号。</li>
<li>确认应答号：32位，指下一次应该收到的数据序列号。</li>
<li>数据偏移 <code>Data Offset</code>：表示TCP所传输的 <strong>数据部分</strong> 应该从TCP包的哪个位开始，可以看作TCP首部的长度，4位，单位为4字节，一般没有选项字段的话就设置为5，表示首部为20字节。</li>
<li>保留：一般设置为0。</li>
<li>控制位（<code>Control Flag</code>）：8位，重要的几位：</li>
</ul>
<ol>
<li>CWR和ECE：标志为1时，通知对方网络拥塞，需要缩小拥塞窗口。</li>
<li>URG：1时表示数据中有紧急数据。</li>
<li>ACK：1时确认应答的字段变为有效。</li>
<li>PSH：1时将接收到的数据立刻传给上层应用协议，为0时则先行缓存。</li>
<li>RST：1时强制断开连接。</li>
<li>SYN（<code>Synchronize Flag</code>）：1时希望建立链接，并在序列号的字段进行序列号初始值的设定。</li>
<li>FIN：1时表示今后不会再有数据发送，希望断开连接。</li>
</ol>
<ul>
<li>窗口大小：16位，用于通知从同一个TCP首部的确认应答号所知位置开始能够接收的数据大小（8位字节为单位），如果窗口为0，发送端可以发送探测窗口，但这个探测窗口数据必须是1字节。</li>
<li>校验和：保证首部和数据的可靠性。</li>
<li>紧急指针 <code>Urgent Pointer</code>：16位，只有在控制位中URG为1时有效，其表示紧急数据的末尾在报文段中的位置。</li>
<li>选项 <code>Options</code>：用于提高TCP的传输性能，因为根据首部长度的最大长度为60个字节，因此该字段最多40字节，具有代表性的选项：<ul>
<li>类型2的MSS选项用于建立连接时确定的最大段长度。</li>
<li>类型3的窗口扩大，改善TCP吞吐量的选项，最多扩展到1G字节。</li>
<li>类型8的时间戳字段选项，为了能够让序列号更加细分，在复杂的网络中区分新老序列号。</li>
</ul>
</li>
</ul>
<h2 id="校验和的计算"><a href="#校验和的计算" class="headerlink" title="校验和的计算"></a>校验和的计算</h2><ul>
<li>TCP校验和覆盖TCP首部和TCP数据，而IP首部中的校验和只覆盖IP的首部，不覆盖IP数据报中的任何数据。</li>
<li><strong>TCP的校验和是必需的，而UDP的校验和是可选的</strong>。</li>
<li>TCP和UDP计算校验和时，都要加上一个12字节的伪首部。</li>
<li>伪首部共有12字节，包含如下信息：源IP地址、目的IP地址、保留字节(置0)、传输层协议号(TCP是6)、**TCP报文长度(报头+数据)**。</li>
<li>伪首部是为了增加TCP校验和的检错能力：如检查TCP报文是否收错了(目的IP地址)、传输层协议是否选对了(传输层协议号)等。</li>
</ul>
<ol>
<li>把伪首部、TCP报头、TCP数据分为16位的字，如果总长度为奇数个字节，则在最后增添一个位都为0的字节。**<em>把TCP报头中的校验和字段置为0**</em>（否则就陷入鸡生蛋还是蛋生鸡的问题）。</li>
<li>用反码相加法累加所有的16位字（进位也要累加）。</li>
<li>对计算结果取反，作为TCP校验和。</li>
<li>如果计算校核字段在内的所有数据的16位和以后得到的结果是“16位全部为1”说明收到的数据正确（即取反后为0）。</li>
</ol>
<h2 id="窗口大小和吞吐量"><a href="#窗口大小和吞吐量" class="headerlink" title="窗口大小和吞吐量"></a>窗口大小和吞吐量</h2><ul>
<li>TCP通信的最大吞吐量由 <strong>窗口大小</strong> 和 <strong>往返时间</strong>（RTT）决定。</li>
<li>Tmax表示最大吞吐量，单位为（比特/秒），W为窗口大小，单位为字节（8位字），RTT为秒<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Tmax &#x3D; W&#x2F;RTT</span><br></pre></td></tr></table></figure></li>
<li>以上的Tmax表示一个连接的最大吞吐量，因此web浏览器一般为了提高吞吐量一般会建立4个连接。</li>
</ul>
]]></content>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>进程同步问题</title>
    <url>/2020/12/06/%E8%BF%9B%E7%A8%8B%E5%90%8C%E6%AD%A5%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>注：代码一部分来自于《操作系统概念》</p>
<h1 id="关于同步和异步-阻塞和非阻塞"><a href="#关于同步和异步-阻塞和非阻塞" class="headerlink" title="关于同步和异步/阻塞和非阻塞"></a>关于同步和异步/阻塞和非阻塞</h1><p>同步和异步关注的是消息通信机制。</p>
<ul>
<li><p>同步：调用者会等待调用返回结果才会继续往后执行。</p>
</li>
<li><p>异步：调用者发出调用后会继续往后执行后继操作。</p>
</li>
<li><p>阻塞调用会导致调用者线程挂起，知道调用结果返回，而同步调用在很多时候调用者线程还是激活状态，只是逻辑上当前函数没有返回，即同步等待时什么也不干，白白占用资源。</p>
</li>
</ul>
<a id="more"></a>

<h1 id="关于临界区"><a href="#关于临界区" class="headerlink" title="关于临界区"></a>关于临界区</h1><p>临界区问题必须满足的三项条件：</p>
<ol>
<li>互斥：临界区内只有一个进程在执行</li>
<li>前进：如果没有进程在临界区内执行且有进程需要进入临界区，则需要从不在剩余区执行的进程中选择进程进入临界区，且不能无限推迟这个选择。</li>
<li>有限等待：字面意思</li>
</ol>
<h1 id="基于软件的同步解决方法"><a href="#基于软件的同步解决方法" class="headerlink" title="基于软件的同步解决方法"></a>基于软件的同步解决方法</h1><h2 id="单标志法"><a href="#单标志法" class="headerlink" title="单标志法"></a>单标志法</h2><ul>
<li>算法：两个进程在访问完临界区后，把使用临界区的权限转交给另外一个进程，保证临界区内只有一个进程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> turn = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P0 进程:</span></span><br><span class="line"><span class="keyword">while</span>(turn != <span class="number">0</span>);</span><br><span class="line">critical section; <span class="comment">// 临界区</span></span><br><span class="line">turn = <span class="number">1</span>;</span><br><span class="line">remainder section; <span class="comment">// 剩余区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// P1 进程:</span></span><br><span class="line"><span class="keyword">while</span>(turn != <span class="number">1</span>);</span><br><span class="line">critical section;</span><br><span class="line">turn = <span class="number">0</span>;</span><br><span class="line">remainder section;</span><br></pre></td></tr></table></figure>

<ul>
<li>缺陷：如果<code>P0</code>不进入，则<code>P1</code>也无法进入，违反“前进”原则。</li>
</ul>
<h2 id="双标志先检查法"><a href="#双标志先检查法" class="headerlink" title="双标志先检查法"></a>双标志先检查法</h2><ul>
<li>思想：设置一个<code>bool</code>数组，各个元素标记各进程想进入临界区的意愿。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">bool flag[<span class="number">2</span>];</span><br><span class="line">flag[<span class="number">0</span>] = <span class="keyword">false</span>;</span><br><span class="line">flag[<span class="number">1</span>] = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P0 进程:</span></span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">1</span>]); <span class="comment">// 如果P1想进去临界区，则P0一直等待</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="keyword">true</span>; <span class="comment">// 标记P0想进去临界区</span></span><br><span class="line">critical section; <span class="comment">// 临界区</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="keyword">false</span>;</span><br><span class="line">remainder section; <span class="comment">// 剩余区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// P1 进程:</span></span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">0</span>]);</span><br><span class="line">flag[<span class="number">1</span>] = <span class="keyword">true</span>;</span><br><span class="line">critical section; <span class="comment">// 临界区</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="keyword">false</span>;</span><br><span class="line">remainder section; <span class="comment">// 剩余区</span></span><br></pre></td></tr></table></figure>

<ul>
<li>缺陷：一开始的时候，两个进程都不想进去，则都将自己标记成想进去，则两个进程都进入了临界区，违反“互斥”原则，这主要是因为进入区的“检查”和“上锁”不是一气呵成的，在两个操作之间可能会发生进程切换。</li>
</ul>
<h2 id="双标志后检查法"><a href="#双标志后检查法" class="headerlink" title="双标志后检查法"></a>双标志后检查法</h2><ul>
<li>算法：在先检查法的基础上，先设置标志为<code>true</code>，即先上锁后检查。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag[<span class="number">2</span>];</span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P0 进程:</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">true</span>; <span class="comment">// 标记P0想进去临界区</span></span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">1</span>]); <span class="comment">// 如果P1想进去临界区，则P0一直等待</span></span><br><span class="line">critical section; <span class="comment">// 临界区</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">remainder section; <span class="comment">// 剩余区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// P1 进程:</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">0</span>]);</span><br><span class="line">critical section; <span class="comment">// 临界区</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">remainder section; <span class="comment">// 剩余区</span></span><br></pre></td></tr></table></figure>

<ul>
<li>缺陷：如果一开始两个进程都被标记成想进入临界区，则会导致临界区没有进程进入，违反“前进”和“有限等待”原则。最终导致进程饥饿。</li>
</ul>
<h2 id="Peterson算法"><a href="#Peterson算法" class="headerlink" title="Peterson算法"></a>Peterson算法</h2><ul>
<li>算法：尝试主动让对方先进入临界区。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> flag[<span class="number">2</span>]; <span class="comment">// 表示进入临界区意愿的数组</span></span><br><span class="line"><span class="keyword">int</span> turn = <span class="number">0</span>; <span class="comment">// turn表示优先让哪个进程进入临界区</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P0 进程:</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">true</span>; <span class="comment">// 标记P0想进去临界区</span></span><br><span class="line">turn = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">1</span>] &amp;&amp; turn == <span class="number">1</span>); <span class="comment">// 如果P1想进去临界区，则P0一直等待</span></span><br><span class="line">critical section; <span class="comment">// 临界区</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="literal">false</span>;</span><br><span class="line">remainder section; <span class="comment">// 剩余区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// P1 进程:</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">turn = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(flag[<span class="number">0</span>] &amp;&amp; turn == <span class="number">0</span>);</span><br><span class="line">critical section; <span class="comment">// 临界区</span></span><br><span class="line">flag[<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">remainder section; <span class="comment">// 剩余区</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>在该算法的进入区中，进程先表示要进入临界区的意愿，然后再主动谦让，最后检查对方是否也想使用。</p>
</li>
<li><p>缺陷：容易导致双方在忙等，占用cpu不停循环。</p>
</li>
</ul>
<h1 id="基于硬件的同步解决方法"><a href="#基于硬件的同步解决方法" class="headerlink" title="基于硬件的同步解决方法"></a>基于硬件的同步解决方法</h1><ul>
<li>特殊的硬件指令以允许能原子地“检查”和“修改”字的内容或“交换”两个字的内容（作为不可中断指令）</li>
</ul>
<h2 id="TestAndSet"><a href="#TestAndSet" class="headerlink" title="TestAndSet"></a>TestAndSet</h2><ul>
<li><code>TestAndSet()</code>用来检查和修改字，可以用来实现互斥，其中<code>lock</code>初始化为<code>false</code>。<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">boolean <span class="title">TestAndSet</span><span class="params">(boolean *target)</span></span>&#123;</span><br><span class="line">    boolean rv = *target;</span><br><span class="line">    *target = TRUE;</span><br><span class="line">    <span class="keyword">return</span> rv;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现互斥</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(TestAndSet(&amp;lock))</span><br><span class="line">        ; <span class="comment">// do nothing</span></span><br><span class="line">        <span class="comment">// critical section</span></span><br><span class="line">    lock = FALSE;</span><br><span class="line">        <span class="comment">// remainder section</span></span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Swap"><a href="#Swap" class="headerlink" title="Swap"></a>Swap</h2><ul>
<li><p><code>Swap()</code>操作两个数据，原子地实现数据的交换，也可以实现互斥，需要声明一个全局的<code>bool</code>变量<code>lock</code>，初始化为<code>false</code>；同时每个进程也有一个局部的<code>bool</code>变量<code>key</code>。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Swap</span><span class="params">(boolean *a, boolean *b)</span></span>&#123;</span><br><span class="line">    boolean temp = *a;</span><br><span class="line">    *a = *b;</span><br><span class="line">    *b = temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Swap实现互斥</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    key = TRUE;</span><br><span class="line">    <span class="keyword">while</span>(key == TRUE)</span><br><span class="line">        Swap(&amp;lock, &amp;key);</span><br><span class="line">        <span class="comment">//critical section</span></span><br><span class="line">    lock = FALSE;</span><br><span class="line">        <span class="comment">//remainder section</span></span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE);</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上互斥算法都没有解决有限等待。</p>
</li>
</ul>
<h1 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h1><ul>
<li><p>在应用层面解决临界区问题</p>
</li>
<li><p>由于进程互斥的实现方法无法做到“让权等待”，且双标志法进入区的“检查”、“上锁”无法一气呵成，导致可能两个进程同时进入临界区的问题，而使用信号量机制。</p>
</li>
<li><p>信号量其实就是表示系统中某种资源的数量，使用一对原语：<code>wait(S)</code>和<code>signal(S)</code>，一般叫做<code>PV</code>操作。</p>
</li>
<li><p>P：测试；V：增加</p>
</li>
<li><p>二进制信号量的值只能是0或1，一般称为互斥锁。</p>
</li>
</ul>
<h2 id="整型信号量（实现自旋锁）"><a href="#整型信号量（实现自旋锁）" class="headerlink" title="整型信号量（实现自旋锁）"></a>整型信号量（实现自旋锁）</h2><ul>
<li>与普通整数变量操作的区别，信号量操作只有三种：初始化、P操作、V操作。 </li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">semaphore S = <span class="number">1</span>; <span class="comment">// 初始化整型信号量S，表示共享资源数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span><span class="params">(semaphore *S)</span> </span>&#123; <span class="comment">// wait原语，相当于“进入区”</span></span><br><span class="line">    <span class="keyword">while</span>(S &lt;= <span class="number">0</span>);        <span class="comment">// 资源数不够就循环等待</span></span><br><span class="line">    S = S - <span class="number">1</span>;            <span class="comment">// 资源数够就占用一个</span></span><br><span class="line">&#125;    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span><span class="params">(semaphore *S)</span> </span>&#123; <span class="comment">// signal原语，相当于“退出区”</span></span><br><span class="line">    S = S + <span class="number">1</span>;              <span class="comment">// 退出释放资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现互斥：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    waiting(mutex);</span><br><span class="line">        <span class="comment">// critical seciton</span></span><br><span class="line">    signal(mutex);</span><br><span class="line">        <span class="comment">// remainder section</span></span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE);</span><br></pre></td></tr></table></figure>

<ul>
<li>整型信号量解决的问题：使得“检查”和“上锁”一气呵成，解决并发、异步产生的问题，但是存在忙等的现象，称为自旋锁，优点就是在等待锁时不需要进行上下文切换，使用于占用锁时间较少的多处理器系统。</li>
</ul>
<h2 id="记录型信号量"><a href="#记录型信号量" class="headerlink" title="记录型信号量"></a>记录型信号量</h2><ul>
<li>为了克服忙等，当一个进程执行<code>wait()</code>操作时，发现信号量不正时，该进程不是忙等而是阻塞自己，阻塞操作就是将一个进程放入到与信号量相关的等待队列中，并将该进程的状态切换成等待状态。</li>
</ul>
<p>记录型信号量的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 记录型信号量的定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">process</span> *<span class="title">list</span>;</span></span><br><span class="line">&#125; semaphore;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 某进程需要使用资源时，通过wait原语申请</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">wait</span> <span class="params">(semaphore *S)</span></span>&#123;</span><br><span class="line">    S-&gt;value--; <span class="comment">// 递减，set</span></span><br><span class="line">    <span class="keyword">if</span>(S-&gt;value &lt; <span class="number">0</span>) &#123; <span class="comment">// 检查，test</span></span><br><span class="line">        add <span class="keyword">this</span> process to S-&gt;<span class="built_in">list</span>;</span><br><span class="line">        block();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 进程使用完资源后，通过signal原语释放</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">signal</span> <span class="params">(semaphore *S)</span> </span>&#123;</span><br><span class="line">    S-&gt;value ++;</span><br><span class="line">    <span class="keyword">if</span>(S-&gt;value &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        remove a process P from S-&gt;<span class="built_in">list</span>;</span><br><span class="line">        wakeup(P);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>整型信号量的信号量不可能是负数，但是本实现可以，信号量如果是负数，那么绝对值就是等待队列中进程的个数。</p>
</li>
<li><p>出现负数的原因是<code>wait()</code>操作中递减和测试的次序的调换。</p>
</li>
</ul>
<h2 id="信号量实现进程互斥"><a href="#信号量实现进程互斥" class="headerlink" title="信号量实现进程互斥"></a>信号量实现进程互斥</h2><ol>
<li>划定临界区，临界区也是一种特殊的资源</li>
<li>设置互斥信号量为<code>mutex</code>，初始值为1</li>
<li>在临界区之前执行<code>P(mutex)</code></li>
<li>在临界区之后执行<code>V(mutex)</code></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">semaphore mutex = <span class="number">1</span>; <span class="comment">// 初始化信号量为 1</span></span><br><span class="line"></span><br><span class="line">P1()&#123;</span><br><span class="line">    ...</span><br><span class="line">    P(mutex); <span class="comment">// 加锁</span></span><br><span class="line">    <span class="comment">// critical section</span></span><br><span class="line">    V(mutex); <span class="comment">// 解锁</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P2()&#123;</span><br><span class="line">    ...</span><br><span class="line">    P(mutex); <span class="comment">// 加锁</span></span><br><span class="line">    <span class="comment">// critical section</span></span><br><span class="line">    V(mutex); <span class="comment">// 解锁</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="信号量实现进程同步"><a href="#信号量实现进程同步" class="headerlink" title="信号量实现进程同步"></a>信号量实现进程同步</h2><p>进程同步：让并发进程按要求有序推进</p>
<ol>
<li>找到需要保证一前一后执行的两个操作</li>
<li>设置同步信号量<code>S</code>，初始值为0</li>
<li>在“前操作”后执行<code>V(S)</code></li>
<li>在“后操作”前执行<code>P(S)</code></li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">semaphore S = <span class="number">0</span>; <span class="comment">// 初始化信号量为 0</span></span><br><span class="line"></span><br><span class="line">P1()&#123;</span><br><span class="line">    代码<span class="number">1</span>;</span><br><span class="line">    代码<span class="number">2</span>;</span><br><span class="line">    V(S);</span><br><span class="line">    代码<span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">P2()&#123;</span><br><span class="line">    P(S);</span><br><span class="line">    代码<span class="number">4</span>;</span><br><span class="line">    代码<span class="number">5</span>;</span><br><span class="line">    代码<span class="number">6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="信号量实现经典同步问题"><a href="#信号量实现经典同步问题" class="headerlink" title="信号量实现经典同步问题"></a>信号量实现经典同步问题</h2><h3 id="有限缓冲区问题（生产者-消费者）"><a href="#有限缓冲区问题（生产者-消费者）" class="headerlink" title="有限缓冲区问题（生产者-消费者）"></a>有限缓冲区问题（生产者-消费者）</h3><ul>
<li>缓冲池中有n个缓冲项，信号量<code>mutex</code>提供了对缓冲池访问的互斥要求，并初始化为1（信号量实现互斥）。信号量<code>empty</code>和<code>full</code>分别表示空缓冲项和满缓冲项的个数，分别初始化为n和0，用来实现进程同步。</li>
</ul>
<p>生产者生产满缓冲项，实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//produce an item in nextp</span></span><br><span class="line">    ...</span><br><span class="line">    wait(empty);</span><br><span class="line">    wait(mutex);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//add nextp to buffer</span></span><br><span class="line">    ...</span><br><span class="line">    signal(mutex);</span><br><span class="line">    signal(full);</span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE);</span><br></pre></td></tr></table></figure>

<p>消费者产生空缓冲项，实现如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    wait(full);</span><br><span class="line">    wait(mutex);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//remove an item in nextc</span></span><br><span class="line">    ...</span><br><span class="line">    signal(mutex);</span><br><span class="line">    signal(empty);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//consume the item in nextc</span></span><br><span class="line">    ...</span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE);</span><br></pre></td></tr></table></figure>

<h3 id="读者-写者问题"><a href="#读者-写者问题" class="headerlink" title="读者-写者问题"></a>读者-写者问题</h3><p>需要满足：</p>
<ol>
<li>允许多个读者</li>
<li>不允许读者、写者同时操作</li>
<li>不允许多个写者</li>
</ol>
<ul>
<li><p>解决读者-写者问题，读者进程共享如下数据结构：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">semaphore mutex, wrt;</span><br><span class="line"><span class="keyword">int</span> readcount;</span><br></pre></td></tr></table></figure></li>
<li><p><code>mutex</code>和<code>wrt</code>初始化为1；<code>readcount</code>初始化为0。信号量<code>wrt</code>为读者和写者进程锁共用。<code>mutex</code>用于确保互斥地更新<code>readcount</code>，变量<code>readcount</code>用来跟踪有多少进程正在读对象，信号量<code>wrt</code>供写者作为互斥信号量，以及第一个进入临界区和最后一个离开临界区的读者使用，而不被其他读者使用。</p>
</li>
<li><p>注意，如果有一个进程在临界区内，且<code>n</code>个进程处于等待，那么一个读者在<code>wrt</code>上等待，而<code>n-1</code>个在<code>mutex</code>上等待。</p>
</li>
</ul>
<p>写者进程实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    wait(wrt);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//writing is performed</span></span><br><span class="line">    ...</span><br><span class="line">    signal(wrt);</span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE);</span><br></pre></td></tr></table></figure>

<p>读者进程实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    wait(mutex);</span><br><span class="line">    readcount++;</span><br><span class="line">    <span class="keyword">if</span>(readcount == <span class="number">1</span>) <span class="comment">// 第一个进入临界区的读者</span></span><br><span class="line">        wait(wrt); <span class="comment">// 防止读写同时进行</span></span><br><span class="line">    signal(mutex);</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//reading is performed</span></span><br><span class="line">    ...</span><br><span class="line">    wait(mutex);</span><br><span class="line">    readcount--;</span><br><span class="line">    <span class="keyword">if</span>(readcount == <span class="number">0</span>) <span class="comment">// 最后一个离开临界区的读者</span></span><br><span class="line">        signal(wrt);</span><br><span class="line">    signal(mutex);</span><br><span class="line">&#125;<span class="keyword">while</span>(TRUE);</span><br></pre></td></tr></table></figure>

<h3 id="哲学家进餐问题"><a href="#哲学家进餐问题" class="headerlink" title="哲学家进餐问题"></a>哲学家进餐问题</h3><p>只说明关于这个问题的解决方法：</p>
<ol>
<li>最多只允许4个哲学家同时坐在桌子上</li>
<li>只有两只筷子都可用时才允许一个哲学家拿起他们（他必须在临界区内拿起两只筷子）</li>
<li>使用非对称解决方法，即奇数哲学家先拿起左边的筷子，接着拿起右边的筷子，而偶数哲学家先拿起右边的筷子，接着拿起左边的筷子。</li>
</ol>
<p>关于死锁，等待下一次写。</p>
]]></content>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
</search>
